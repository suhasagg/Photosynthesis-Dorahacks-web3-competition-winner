syntax = "proto3";

option go_package = "github.com/archway-network/archway/x/photosynthesis/types";

import "google/protobuf/timestamp.proto";

import "google/protobuf/duration.proto";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "archway/photosynthesis/photosynthesis.proto";

// Define the gRPC service interface for the remote methods.
service Query {
  rpc QueryLiquidTokens(QueryLiquidTokensParams) returns (Coin);
  rpc QueryLiquidStakingDeposit(QueryLiquidStakingDepositParams)
      returns (QueryLiquidStakingDepositResponse);
  rpc QueryLiquidityTokenBalance(QueryLiquidityTokenBalanceParams)
      returns (QueryLiquidityTokenBalanceResponse);
  rpc QueryRedemptionRate(QueryRedemptionRateParams)
      returns (QueryRedemptionRateResponse);
  rpc QueryAirdropStatus(QueryAirdropStatusParams)
      returns (QueryAirdropStatusResponse);
  rpc QueryArchLiquidStakeInterval(QueryArchLiquidStakeIntervalRequest)
      returns (QueryArchLiquidStakeIntervalResponse);
  rpc QueryRedemptionRateQueryInterval(QueryRedemptionRateQueryIntervalRequest)
      returns (QueryRedemptionRateQueryIntervalResponse);
  rpc QueryRedemptionInterval(QueryRedemptionIntervalRequest)
      returns (QueryRedemptionIntervalResponse);
  rpc QueryRedemptionRateThreshold(QueryRedemptionRateThresholdRequest)
      returns (QueryRedemptionRateThresholdResponse);
  rpc QueryRewardsWithdrawalInterval(QueryRewardsWithdrawalIntervalRequest)
      returns (QueryRewardsWithdrawalIntervalResponse);
  rpc QueryLatestRedemptionRecord(QueryLatestRedemptionRecordRequest)
      returns (QueryLatestRedemptionRecordResponse);
  rpc QueryCumulativeLiquidityAmount(QueryCumulativeLiquidityAmountRequest)
      returns (QueryCumulativeLiquidityAmountResponse);
}

// Add new request and response message types

message QueryArchLiquidStakeIntervalRequest {}
message QueryArchLiquidStakeIntervalResponse {
  string arch_liquid_stake_interval = 1;
}

message QueryRedemptionRateQueryIntervalRequest {}
message QueryRedemptionRateQueryIntervalResponse {
  string redemption_rate_query_interval = 1;
}

message QueryRedemptionIntervalRequest {}
message QueryRedemptionIntervalResponse { string redemption_interval = 1; }

message QueryRedemptionRateThresholdRequest {}
message QueryRedemptionRateThresholdResponse {
  string redemption_rate_threshold = 1;
}

message QueryRewardsWithdrawalIntervalRequest { string contract_address = 1; }
message QueryRewardsWithdrawalIntervalResponse {
  string rewards_withdrawal_interval = 1;
}

message QueryLatestRedemptionRecordRequest {}
message QueryLatestRedemptionRecordResponse {
  string latest_redemption_record = 1;
}

message QueryCumulativeLiquidityAmountRequest {}
message QueryCumulativeLiquidityAmountResponse {
  uint64 cumulative_liquidity_amount = 1;
}

// Existing request and response messages remain unchanged

// QueryLiquidTokensParams defines the parameters for the QueryLiquidTokens
// query.
message QueryLiquidTokensParams { string contract_address = 1; }

// QueryLiquidStakingDepositParams defines the parameters for the
// QueryLiquidStakingDeposit query.
message QueryLiquidStakingDepositParams {
  string sender_address = 1;
  string contract_address = 2;
}

// QueryLiquidityTokenBalanceParams defines the parameters for the
// QueryLiquidityTokenBalance query.
message QueryLiquidityTokenBalanceParams { string sender_address = 1; }

// QueryRedemptionRateParams defines the parameters for the QueryRedemptionRate
// query.
message QueryRedemptionRateParams {}

// QueryAirdropStatusParams defines the parameters for the QueryAirdropStatus
// query.
message QueryAirdropStatusParams { string sender_address = 1; }

// QueryLiquidStakingDepositResponse defines the response to the
// QueryLiquidStakingDeposit query.
message QueryLiquidStakingDepositResponse {
  repeated Coin deposit_amount = 1;
  repeated Coin liquidity_token_amount = 2;
  int64 next_redemption_time = 3;
}

// QueryLiquidityTokenBalanceResponse defines the response to the
// QueryLiquidityTokenBalance query.
message QueryLiquidityTokenBalanceResponse { repeated Coin balance = 1; }

// QueryRedemptionRateResponse defines the response to the QueryRedemptionRate
// query.
message QueryRedemptionRateResponse { string redemption_rate = 1; }

// QueryAirdropStatusResponse defines the response to the QueryAirdropStatus
// query.
message QueryAirdropStatusResponse {
  repeated Coin total_amount = 1;
  string vesting_schedule = 2;
  repeated Coin current_balance = 3;
}
