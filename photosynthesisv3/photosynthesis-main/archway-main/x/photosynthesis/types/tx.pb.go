// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/photosynthesis/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSetArchLiquidStakeInterval struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Interval    uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *MsgSetArchLiquidStakeInterval) Reset()         { *m = MsgSetArchLiquidStakeInterval{} }
func (m *MsgSetArchLiquidStakeInterval) String() string { return proto.CompactTextString(m) }
func (*MsgSetArchLiquidStakeInterval) ProtoMessage()    {}
func (*MsgSetArchLiquidStakeInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{0}
}
func (m *MsgSetArchLiquidStakeInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetArchLiquidStakeInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetArchLiquidStakeInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetArchLiquidStakeInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetArchLiquidStakeInterval.Merge(m, src)
}
func (m *MsgSetArchLiquidStakeInterval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetArchLiquidStakeInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetArchLiquidStakeInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetArchLiquidStakeInterval proto.InternalMessageInfo

func (m *MsgSetArchLiquidStakeInterval) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSetArchLiquidStakeInterval) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type MsgSetArchLiquidStakeIntervalResponse struct {
}

func (m *MsgSetArchLiquidStakeIntervalResponse) Reset()         { *m = MsgSetArchLiquidStakeIntervalResponse{} }
func (m *MsgSetArchLiquidStakeIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetArchLiquidStakeIntervalResponse) ProtoMessage()    {}
func (*MsgSetArchLiquidStakeIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{1}
}
func (m *MsgSetArchLiquidStakeIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetArchLiquidStakeIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetArchLiquidStakeIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetArchLiquidStakeIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetArchLiquidStakeIntervalResponse.Merge(m, src)
}
func (m *MsgSetArchLiquidStakeIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetArchLiquidStakeIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetArchLiquidStakeIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetArchLiquidStakeIntervalResponse proto.InternalMessageInfo

// MsgSetRedemptionRateQueryInterval defines a message for setting the
// redemption rate query interval
type MsgSetRedemptionRateQueryInterval struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Interval    uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *MsgSetRedemptionRateQueryInterval) Reset()         { *m = MsgSetRedemptionRateQueryInterval{} }
func (m *MsgSetRedemptionRateQueryInterval) String() string { return proto.CompactTextString(m) }
func (*MsgSetRedemptionRateQueryInterval) ProtoMessage()    {}
func (*MsgSetRedemptionRateQueryInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{2}
}
func (m *MsgSetRedemptionRateQueryInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRedemptionRateQueryInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRedemptionRateQueryInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRedemptionRateQueryInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRedemptionRateQueryInterval.Merge(m, src)
}
func (m *MsgSetRedemptionRateQueryInterval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRedemptionRateQueryInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRedemptionRateQueryInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRedemptionRateQueryInterval proto.InternalMessageInfo

func (m *MsgSetRedemptionRateQueryInterval) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSetRedemptionRateQueryInterval) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type MsgSetRedemptionRateQueryIntervalResponse struct {
}

func (m *MsgSetRedemptionRateQueryIntervalResponse) Reset() {
	*m = MsgSetRedemptionRateQueryIntervalResponse{}
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSetRedemptionRateQueryIntervalResponse) ProtoMessage() {}
func (*MsgSetRedemptionRateQueryIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{3}
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRedemptionRateQueryIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRedemptionRateQueryIntervalResponse.Merge(m, src)
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRedemptionRateQueryIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRedemptionRateQueryIntervalResponse proto.InternalMessageInfo

// MsgSetRedemptionInterval defines a message for setting the redemption
// interval for liquid tokens
type MsgSetRedemptionInterval struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Interval    uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *MsgSetRedemptionInterval) Reset()         { *m = MsgSetRedemptionInterval{} }
func (m *MsgSetRedemptionInterval) String() string { return proto.CompactTextString(m) }
func (*MsgSetRedemptionInterval) ProtoMessage()    {}
func (*MsgSetRedemptionInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{4}
}
func (m *MsgSetRedemptionInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRedemptionInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRedemptionInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRedemptionInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRedemptionInterval.Merge(m, src)
}
func (m *MsgSetRedemptionInterval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRedemptionInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRedemptionInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRedemptionInterval proto.InternalMessageInfo

func (m *MsgSetRedemptionInterval) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSetRedemptionInterval) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type MsgSetRedemptionIntervalResponse struct {
}

func (m *MsgSetRedemptionIntervalResponse) Reset()         { *m = MsgSetRedemptionIntervalResponse{} }
func (m *MsgSetRedemptionIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetRedemptionIntervalResponse) ProtoMessage()    {}
func (*MsgSetRedemptionIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{5}
}
func (m *MsgSetRedemptionIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRedemptionIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRedemptionIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRedemptionIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRedemptionIntervalResponse.Merge(m, src)
}
func (m *MsgSetRedemptionIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRedemptionIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRedemptionIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRedemptionIntervalResponse proto.InternalMessageInfo

// MsgSetRedemptionRateThreshold defines a message for setting the redemption
// rate threshold for liquid tokens
type MsgSetRedemptionRateThreshold struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Threshold   string `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *MsgSetRedemptionRateThreshold) Reset()         { *m = MsgSetRedemptionRateThreshold{} }
func (m *MsgSetRedemptionRateThreshold) String() string { return proto.CompactTextString(m) }
func (*MsgSetRedemptionRateThreshold) ProtoMessage()    {}
func (*MsgSetRedemptionRateThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{6}
}
func (m *MsgSetRedemptionRateThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRedemptionRateThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRedemptionRateThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRedemptionRateThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRedemptionRateThreshold.Merge(m, src)
}
func (m *MsgSetRedemptionRateThreshold) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRedemptionRateThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRedemptionRateThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRedemptionRateThreshold proto.InternalMessageInfo

func (m *MsgSetRedemptionRateThreshold) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSetRedemptionRateThreshold) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

type MsgSetRedemptionRateThresholdResponse struct {
}

func (m *MsgSetRedemptionRateThresholdResponse) Reset()         { *m = MsgSetRedemptionRateThresholdResponse{} }
func (m *MsgSetRedemptionRateThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetRedemptionRateThresholdResponse) ProtoMessage()    {}
func (*MsgSetRedemptionRateThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{7}
}
func (m *MsgSetRedemptionRateThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRedemptionRateThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRedemptionRateThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRedemptionRateThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRedemptionRateThresholdResponse.Merge(m, src)
}
func (m *MsgSetRedemptionRateThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRedemptionRateThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRedemptionRateThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRedemptionRateThresholdResponse proto.InternalMessageInfo

// MsgSetRewardsWithdrawalInterval defines a message for setting the rewards
// withdrawal interval for the specified contract address
type MsgSetRewardsWithdrawalInterval struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Interval        uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *MsgSetRewardsWithdrawalInterval) Reset()         { *m = MsgSetRewardsWithdrawalInterval{} }
func (m *MsgSetRewardsWithdrawalInterval) String() string { return proto.CompactTextString(m) }
func (*MsgSetRewardsWithdrawalInterval) ProtoMessage()    {}
func (*MsgSetRewardsWithdrawalInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{8}
}
func (m *MsgSetRewardsWithdrawalInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRewardsWithdrawalInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRewardsWithdrawalInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRewardsWithdrawalInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRewardsWithdrawalInterval.Merge(m, src)
}
func (m *MsgSetRewardsWithdrawalInterval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRewardsWithdrawalInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRewardsWithdrawalInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRewardsWithdrawalInterval proto.InternalMessageInfo

func (m *MsgSetRewardsWithdrawalInterval) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgSetRewardsWithdrawalInterval) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type MsgSetRewardsWithdrawalIntervalResponse struct {
}

func (m *MsgSetRewardsWithdrawalIntervalResponse) Reset() {
	*m = MsgSetRewardsWithdrawalIntervalResponse{}
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetRewardsWithdrawalIntervalResponse) ProtoMessage()    {}
func (*MsgSetRewardsWithdrawalIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{9}
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRewardsWithdrawalIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRewardsWithdrawalIntervalResponse.Merge(m, src)
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRewardsWithdrawalIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRewardsWithdrawalIntervalResponse proto.InternalMessageInfo

// MsgMintNFT represents the message to mint an NFT
type MsgMintNFT struct {
	Denom          string   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TokenId        string   `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenUri       string   `protobuf:"bytes,3,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	Properties     []string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
	CreationTime   string   `protobuf:"bytes,5,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	LastUpdateTime string   `protobuf:"bytes,6,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (m *MsgMintNFT) Reset()         { *m = MsgMintNFT{} }
func (m *MsgMintNFT) String() string { return proto.CompactTextString(m) }
func (*MsgMintNFT) ProtoMessage()    {}
func (*MsgMintNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{10}
}
func (m *MsgMintNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintNFT.Merge(m, src)
}
func (m *MsgMintNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintNFT proto.InternalMessageInfo

func (m *MsgMintNFT) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgMintNFT) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgMintNFT) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func (m *MsgMintNFT) GetProperties() []string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *MsgMintNFT) GetCreationTime() string {
	if m != nil {
		return m.CreationTime
	}
	return ""
}

func (m *MsgMintNFT) GetLastUpdateTime() string {
	if m != nil {
		return m.LastUpdateTime
	}
	return ""
}

// MsgLiquidStakeDeposit defines the message for liquid staking Archway rewards.
type MsgLiquidStakeDeposit struct {
	ContractAddress string  `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Amount          []*Coin `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgLiquidStakeDeposit) Reset()         { *m = MsgLiquidStakeDeposit{} }
func (m *MsgLiquidStakeDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidStakeDeposit) ProtoMessage()    {}
func (*MsgLiquidStakeDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{11}
}
func (m *MsgLiquidStakeDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidStakeDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidStakeDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidStakeDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidStakeDeposit.Merge(m, src)
}
func (m *MsgLiquidStakeDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidStakeDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidStakeDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidStakeDeposit proto.InternalMessageInfo

func (m *MsgLiquidStakeDeposit) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgLiquidStakeDeposit) GetAmount() []*Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgRedeemLiquidTokens defines the message for redeeming liquid tokens.
type MsgRedeemLiquidTokens struct {
	ContractAddress string  `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Amount          []*Coin `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgRedeemLiquidTokens) Reset()         { *m = MsgRedeemLiquidTokens{} }
func (m *MsgRedeemLiquidTokens) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemLiquidTokens) ProtoMessage()    {}
func (*MsgRedeemLiquidTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d04daa1c8e6d6f0, []int{12}
}
func (m *MsgRedeemLiquidTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemLiquidTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemLiquidTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemLiquidTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemLiquidTokens.Merge(m, src)
}
func (m *MsgRedeemLiquidTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemLiquidTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemLiquidTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemLiquidTokens proto.InternalMessageInfo

func (m *MsgRedeemLiquidTokens) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgRedeemLiquidTokens) GetAmount() []*Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSetArchLiquidStakeInterval)(nil), "MsgSetArchLiquidStakeInterval")
	proto.RegisterType((*MsgSetArchLiquidStakeIntervalResponse)(nil), "MsgSetArchLiquidStakeIntervalResponse")
	proto.RegisterType((*MsgSetRedemptionRateQueryInterval)(nil), "MsgSetRedemptionRateQueryInterval")
	proto.RegisterType((*MsgSetRedemptionRateQueryIntervalResponse)(nil), "MsgSetRedemptionRateQueryIntervalResponse")
	proto.RegisterType((*MsgSetRedemptionInterval)(nil), "MsgSetRedemptionInterval")
	proto.RegisterType((*MsgSetRedemptionIntervalResponse)(nil), "MsgSetRedemptionIntervalResponse")
	proto.RegisterType((*MsgSetRedemptionRateThreshold)(nil), "MsgSetRedemptionRateThreshold")
	proto.RegisterType((*MsgSetRedemptionRateThresholdResponse)(nil), "MsgSetRedemptionRateThresholdResponse")
	proto.RegisterType((*MsgSetRewardsWithdrawalInterval)(nil), "MsgSetRewardsWithdrawalInterval")
	proto.RegisterType((*MsgSetRewardsWithdrawalIntervalResponse)(nil), "MsgSetRewardsWithdrawalIntervalResponse")
	proto.RegisterType((*MsgMintNFT)(nil), "MsgMintNFT")
	proto.RegisterType((*MsgLiquidStakeDeposit)(nil), "MsgLiquidStakeDeposit")
	proto.RegisterType((*MsgRedeemLiquidTokens)(nil), "MsgRedeemLiquidTokens")
}

func init() { proto.RegisterFile("archway/photosynthesis/tx.proto", fileDescriptor_2d04daa1c8e6d6f0) }

var fileDescriptor_2d04daa1c8e6d6f0 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xa6, 0x2c, 0x20, 0xfb, 0x40, 0x25, 0x0d, 0x24, 0xa5, 0x42, 0x59, 0xd6, 0x28, 0x0b, 0xc4,
	0x36, 0xe0, 0xc9, 0x23, 0x6a, 0x4c, 0x48, 0x5c, 0x13, 0xcb, 0x12, 0xa3, 0x07, 0xd7, 0xd9, 0x76,
	0x68, 0x47, 0xb6, 0x33, 0x65, 0x66, 0xca, 0xb2, 0xff, 0x80, 0x67, 0xff, 0x2c, 0xbd, 0x71, 0xf4,
	0x68, 0xe0, 0x1f, 0x31, 0xfd, 0xc9, 0x82, 0xee, 0x76, 0x4d, 0xf6, 0xd6, 0xf7, 0xcd, 0xd7, 0xf7,
	0xbe, 0xf7, 0x26, 0xdf, 0x1b, 0xd8, 0x40, 0xdc, 0xf1, 0x7b, 0xa8, 0x6f, 0x85, 0x3e, 0x93, 0x4c,
	0xf4, 0xa9, 0xf4, 0xb1, 0x20, 0xc2, 0x92, 0x17, 0x66, 0xc8, 0x99, 0x64, 0xfa, 0x86, 0xc7, 0x98,
	0xd7, 0xc5, 0x56, 0x12, 0x75, 0xa2, 0x13, 0x4b, 0x92, 0x00, 0x0b, 0x89, 0x82, 0x30, 0x23, 0x18,
	0x77, 0x09, 0x6e, 0xc4, 0x91, 0x24, 0x8c, 0x66, 0xe7, 0xcb, 0x1e, 0xf3, 0x58, 0xf2, 0x69, 0xc5,
	0x5f, 0x19, 0xba, 0x96, 0xfd, 0x85, 0x42, 0x62, 0x21, 0x4a, 0x99, 0x4c, 0x7e, 0x11, 0x79, 0x4e,
	0x87, 0x89, 0x80, 0x09, 0xab, 0x83, 0x04, 0xb6, 0xce, 0xf7, 0x3a, 0x58, 0xa2, 0x3d, 0xcb, 0x61,
	0x24, 0xcf, 0xb9, 0x33, 0x78, 0x7e, 0x16, 0x61, 0xde, 0x2f, 0x58, 0x21, 0xf2, 0x08, 0x1d, 0xac,
	0xbf, 0x3b, 0xa4, 0xc3, 0xdb, 0x61, 0x4a, 0xae, 0x7f, 0x86, 0xf5, 0xa6, 0xf0, 0x8e, 0xb0, 0x3c,
	0xe0, 0x8e, 0xff, 0x96, 0x9c, 0x45, 0xc4, 0x3d, 0x92, 0xe8, 0x14, 0x1f, 0x52, 0x89, 0xf9, 0x39,
	0xea, 0xaa, 0x9b, 0xb0, 0x78, 0xc2, 0x59, 0xd0, 0x46, 0xae, 0xcb, 0xb1, 0x10, 0x9a, 0x52, 0x53,
	0x1a, 0x55, 0x7b, 0x21, 0xc6, 0x0e, 0x52, 0x48, 0xd5, 0x61, 0x9e, 0x64, 0x74, 0x6d, 0xba, 0xa6,
	0x34, 0x66, 0xec, 0x22, 0xae, 0x6f, 0xc1, 0x93, 0x91, 0xf9, 0x6d, 0x2c, 0x42, 0x46, 0x05, 0xae,
	0x77, 0x60, 0x33, 0x25, 0xda, 0xd8, 0xc5, 0x41, 0x18, 0xf7, 0x63, 0x23, 0x89, 0xdf, 0xc7, 0xbd,
	0x4e, 0x4a, 0xcc, 0x2e, 0x6c, 0x97, 0xd6, 0x28, 0x04, 0x7d, 0x04, 0xed, 0x2e, 0x79, 0x52, 0x3a,
	0xea, 0x50, 0x1b, 0x96, 0xba, 0x28, 0xff, 0x25, 0xbf, 0x98, 0xdb, 0x5a, 0x5b, 0x3e, 0xc7, 0xc2,
	0x67, 0x5d, 0x77, 0x1c, 0x0d, 0x6b, 0x50, 0x95, 0x39, 0x3f, 0x11, 0x51, 0xb5, 0x6f, 0x80, 0x9b,
	0xab, 0x19, 0x52, 0xa1, 0x90, 0xe2, 0xc3, 0x46, 0x4e, 0xec, 0x21, 0xee, 0x8a, 0x0f, 0x44, 0xfa,
	0x2e, 0x47, 0x3d, 0xd4, 0x2d, 0x06, 0xb2, 0x0d, 0x4b, 0x0e, 0xa3, 0x92, 0x23, 0x47, 0xde, 0x11,
	0xf4, 0x30, 0xc7, 0xc7, 0x19, 0xcc, 0x36, 0x6c, 0x95, 0x54, 0x2a, 0x44, 0xfd, 0x54, 0x00, 0x9a,
	0xc2, 0x6b, 0x12, 0x2a, 0xdf, 0xbd, 0x69, 0xa9, 0xcb, 0x30, 0xeb, 0x62, 0xca, 0x82, 0xac, 0x6a,
	0x1a, 0xa8, 0xab, 0x30, 0x2f, 0xd9, 0x29, 0xa6, 0x6d, 0x92, 0xf7, 0x7f, 0x2f, 0x89, 0x0f, 0x5d,
	0xf5, 0x11, 0x54, 0xd3, 0xa3, 0x88, 0x13, 0xad, 0x92, 0x9c, 0xa5, 0xdc, 0x63, 0x4e, 0x54, 0x03,
	0x20, 0xe4, 0x2c, 0xc4, 0x5c, 0x12, 0x2c, 0xb4, 0x99, 0x5a, 0xa5, 0x51, 0xb5, 0x07, 0x10, 0xf5,
	0x31, 0xdc, 0x77, 0x38, 0x4e, 0x4c, 0xd7, 0x8e, 0xd7, 0x83, 0x36, 0x9b, 0x24, 0x58, 0xcc, 0xc1,
	0x16, 0x09, 0xb0, 0xda, 0x80, 0xa5, 0x2e, 0x12, 0xb2, 0x1d, 0x85, 0x2e, 0x92, 0x38, 0xe5, 0xcd,
	0x25, 0xbc, 0x07, 0x31, 0x7e, 0x9c, 0xc0, 0x31, 0xb3, 0x8e, 0x60, 0xa5, 0x29, 0xbc, 0x01, 0x77,
	0xbc, 0xc6, 0x21, 0x13, 0x44, 0xfe, 0xcf, 0x58, 0xd7, 0x61, 0x0e, 0x05, 0x2c, 0xa2, 0x52, 0x9b,
	0xae, 0x55, 0x1a, 0x0b, 0xfb, 0xb3, 0xe6, 0x2b, 0x46, 0xa8, 0x9d, 0x81, 0x59, 0x89, 0xf8, 0xa6,
	0x71, 0x90, 0x16, 0x6a, 0xc5, 0xcd, 0x8a, 0xc9, 0x95, 0xd8, 0xff, 0x36, 0x03, 0x95, 0xa6, 0xf0,
	0x54, 0x17, 0xf4, 0x11, 0xfb, 0xc4, 0x30, 0x47, 0xee, 0x03, 0xfd, 0xa9, 0x39, 0xd6, 0xbe, 0x50,
	0x43, 0x30, 0x4a, 0x96, 0x45, 0xdd, 0x2c, 0x35, 0xbb, 0xbe, 0x63, 0x8e, 0xbd, 0x10, 0xd4, 0x63,
	0x58, 0xf9, 0xf7, 0x36, 0x58, 0x35, 0x87, 0xb9, 0x59, 0xdf, 0x34, 0xcb, 0x8c, 0x9e, 0x8d, 0x6b,
	0x98, 0xcb, 0x0d, 0x73, 0xa4, 0x47, 0x8b, 0x71, 0x95, 0x78, 0x58, 0xfd, 0x0a, 0x6b, 0x23, 0x0d,
	0x5c, 0x33, 0x4b, 0x8c, 0xa7, 0x37, 0xcc, 0x31, 0xad, 0xf9, 0xf2, 0xe8, 0xc7, 0x95, 0xa1, 0x5c,
	0x5e, 0x19, 0xca, 0xef, 0x2b, 0x43, 0xf9, 0x7e, 0x6d, 0x4c, 0x5d, 0x5e, 0x1b, 0x53, 0xbf, 0xae,
	0x8d, 0xa9, 0x4f, 0x2f, 0x3c, 0x22, 0xfd, 0xa8, 0x63, 0x3a, 0x2c, 0xb0, 0xb2, 0x57, 0xea, 0x19,
	0xc5, 0xb2, 0xc7, 0xf8, 0x69, 0x1e, 0x5b, 0x17, 0x7f, 0xbd, 0xcc, 0xfd, 0x10, 0x8b, 0xce, 0x5c,
	0xf2, 0x5e, 0x3d, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xab, 0xc3, 0xf1, 0xc0, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetArchLiquidStakeInterval(ctx context.Context, in *MsgSetArchLiquidStakeInterval, opts ...grpc.CallOption) (*MsgSetArchLiquidStakeIntervalResponse, error)
	SetRedemptionRateQueryInterval(ctx context.Context, in *MsgSetRedemptionRateQueryInterval, opts ...grpc.CallOption) (*MsgSetRedemptionRateQueryIntervalResponse, error)
	SetRedemptionInterval(ctx context.Context, in *MsgSetRedemptionInterval, opts ...grpc.CallOption) (*MsgSetRedemptionIntervalResponse, error)
	SetRedemptionRateThreshold(ctx context.Context, in *MsgSetRedemptionRateThreshold, opts ...grpc.CallOption) (*MsgSetRedemptionRateThresholdResponse, error)
	SetRewardsWithdrawalInterval(ctx context.Context, in *MsgSetRewardsWithdrawalInterval, opts ...grpc.CallOption) (*MsgSetRewardsWithdrawalIntervalResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetArchLiquidStakeInterval(ctx context.Context, in *MsgSetArchLiquidStakeInterval, opts ...grpc.CallOption) (*MsgSetArchLiquidStakeIntervalResponse, error) {
	out := new(MsgSetArchLiquidStakeIntervalResponse)
	err := c.cc.Invoke(ctx, "/Msg/SetArchLiquidStakeInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRedemptionRateQueryInterval(ctx context.Context, in *MsgSetRedemptionRateQueryInterval, opts ...grpc.CallOption) (*MsgSetRedemptionRateQueryIntervalResponse, error) {
	out := new(MsgSetRedemptionRateQueryIntervalResponse)
	err := c.cc.Invoke(ctx, "/Msg/SetRedemptionRateQueryInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRedemptionInterval(ctx context.Context, in *MsgSetRedemptionInterval, opts ...grpc.CallOption) (*MsgSetRedemptionIntervalResponse, error) {
	out := new(MsgSetRedemptionIntervalResponse)
	err := c.cc.Invoke(ctx, "/Msg/SetRedemptionInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRedemptionRateThreshold(ctx context.Context, in *MsgSetRedemptionRateThreshold, opts ...grpc.CallOption) (*MsgSetRedemptionRateThresholdResponse, error) {
	out := new(MsgSetRedemptionRateThresholdResponse)
	err := c.cc.Invoke(ctx, "/Msg/SetRedemptionRateThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRewardsWithdrawalInterval(ctx context.Context, in *MsgSetRewardsWithdrawalInterval, opts ...grpc.CallOption) (*MsgSetRewardsWithdrawalIntervalResponse, error) {
	out := new(MsgSetRewardsWithdrawalIntervalResponse)
	err := c.cc.Invoke(ctx, "/Msg/SetRewardsWithdrawalInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetArchLiquidStakeInterval(context.Context, *MsgSetArchLiquidStakeInterval) (*MsgSetArchLiquidStakeIntervalResponse, error)
	SetRedemptionRateQueryInterval(context.Context, *MsgSetRedemptionRateQueryInterval) (*MsgSetRedemptionRateQueryIntervalResponse, error)
	SetRedemptionInterval(context.Context, *MsgSetRedemptionInterval) (*MsgSetRedemptionIntervalResponse, error)
	SetRedemptionRateThreshold(context.Context, *MsgSetRedemptionRateThreshold) (*MsgSetRedemptionRateThresholdResponse, error)
	SetRewardsWithdrawalInterval(context.Context, *MsgSetRewardsWithdrawalInterval) (*MsgSetRewardsWithdrawalIntervalResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetArchLiquidStakeInterval(ctx context.Context, req *MsgSetArchLiquidStakeInterval) (*MsgSetArchLiquidStakeIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArchLiquidStakeInterval not implemented")
}
func (*UnimplementedMsgServer) SetRedemptionRateQueryInterval(ctx context.Context, req *MsgSetRedemptionRateQueryInterval) (*MsgSetRedemptionRateQueryIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRedemptionRateQueryInterval not implemented")
}
func (*UnimplementedMsgServer) SetRedemptionInterval(ctx context.Context, req *MsgSetRedemptionInterval) (*MsgSetRedemptionIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRedemptionInterval not implemented")
}
func (*UnimplementedMsgServer) SetRedemptionRateThreshold(ctx context.Context, req *MsgSetRedemptionRateThreshold) (*MsgSetRedemptionRateThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRedemptionRateThreshold not implemented")
}
func (*UnimplementedMsgServer) SetRewardsWithdrawalInterval(ctx context.Context, req *MsgSetRewardsWithdrawalInterval) (*MsgSetRewardsWithdrawalIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRewardsWithdrawalInterval not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetArchLiquidStakeInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetArchLiquidStakeInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetArchLiquidStakeInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg/SetArchLiquidStakeInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetArchLiquidStakeInterval(ctx, req.(*MsgSetArchLiquidStakeInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRedemptionRateQueryInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRedemptionRateQueryInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRedemptionRateQueryInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg/SetRedemptionRateQueryInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRedemptionRateQueryInterval(ctx, req.(*MsgSetRedemptionRateQueryInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRedemptionInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRedemptionInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRedemptionInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg/SetRedemptionInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRedemptionInterval(ctx, req.(*MsgSetRedemptionInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRedemptionRateThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRedemptionRateThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRedemptionRateThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg/SetRedemptionRateThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRedemptionRateThreshold(ctx, req.(*MsgSetRedemptionRateThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRewardsWithdrawalInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRewardsWithdrawalInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRewardsWithdrawalInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Msg/SetRewardsWithdrawalInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRewardsWithdrawalInterval(ctx, req.(*MsgSetRewardsWithdrawalInterval))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetArchLiquidStakeInterval",
			Handler:    _Msg_SetArchLiquidStakeInterval_Handler,
		},
		{
			MethodName: "SetRedemptionRateQueryInterval",
			Handler:    _Msg_SetRedemptionRateQueryInterval_Handler,
		},
		{
			MethodName: "SetRedemptionInterval",
			Handler:    _Msg_SetRedemptionInterval_Handler,
		},
		{
			MethodName: "SetRedemptionRateThreshold",
			Handler:    _Msg_SetRedemptionRateThreshold_Handler,
		},
		{
			MethodName: "SetRewardsWithdrawalInterval",
			Handler:    _Msg_SetRewardsWithdrawalInterval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archway/photosynthesis/tx.proto",
}

func (m *MsgSetArchLiquidStakeInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetArchLiquidStakeInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetArchLiquidStakeInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetArchLiquidStakeIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetArchLiquidStakeIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetArchLiquidStakeIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetRedemptionRateQueryInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRedemptionRateQueryInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRedemptionRateQueryInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetRedemptionRateQueryIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRedemptionRateQueryIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRedemptionRateQueryIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetRedemptionInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRedemptionInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRedemptionInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetRedemptionIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRedemptionIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRedemptionIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetRedemptionRateThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRedemptionRateThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRedemptionRateThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetRedemptionRateThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRedemptionRateThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRedemptionRateThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetRewardsWithdrawalInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRewardsWithdrawalInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRewardsWithdrawalInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetRewardsWithdrawalIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRewardsWithdrawalIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRewardsWithdrawalIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastUpdateTime) > 0 {
		i -= len(m.LastUpdateTime)
		copy(dAtA[i:], m.LastUpdateTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastUpdateTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreationTime) > 0 {
		i -= len(m.CreationTime)
		copy(dAtA[i:], m.CreationTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreationTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Properties[iNdEx])
			copy(dAtA[i:], m.Properties[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Properties[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquidStakeDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidStakeDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidStakeDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemLiquidTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemLiquidTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemLiquidTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetArchLiquidStakeInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovTx(uint64(m.Interval))
	}
	return n
}

func (m *MsgSetArchLiquidStakeIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetRedemptionRateQueryInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovTx(uint64(m.Interval))
	}
	return n
}

func (m *MsgSetRedemptionRateQueryIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetRedemptionInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovTx(uint64(m.Interval))
	}
	return n
}

func (m *MsgSetRedemptionIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetRedemptionRateThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetRedemptionRateThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetRewardsWithdrawalInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovTx(uint64(m.Interval))
	}
	return n
}

func (m *MsgSetRewardsWithdrawalIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Properties) > 0 {
		for _, s := range m.Properties {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.CreationTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastUpdateTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLiquidStakeDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRedeemLiquidTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetArchLiquidStakeInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetArchLiquidStakeInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetArchLiquidStakeInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetArchLiquidStakeIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetArchLiquidStakeIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetArchLiquidStakeIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRedemptionRateQueryInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRedemptionRateQueryInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRedemptionRateQueryInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRedemptionRateQueryIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRedemptionRateQueryIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRedemptionRateQueryIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRedemptionInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRedemptionInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRedemptionInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRedemptionIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRedemptionIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRedemptionIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRedemptionRateThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRedemptionRateThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRedemptionRateThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRedemptionRateThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRedemptionRateThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRedemptionRateThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRewardsWithdrawalInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRewardsWithdrawalInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRewardsWithdrawalInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRewardsWithdrawalIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRewardsWithdrawalIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRewardsWithdrawalIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidStakeDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidStakeDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidStakeDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, &Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemLiquidTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemLiquidTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemLiquidTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, &Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
