// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/photosynthesis/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryArchLiquidStakeIntervalRequest struct {
}

func (m *QueryArchLiquidStakeIntervalRequest) Reset()         { *m = QueryArchLiquidStakeIntervalRequest{} }
func (m *QueryArchLiquidStakeIntervalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArchLiquidStakeIntervalRequest) ProtoMessage()    {}
func (*QueryArchLiquidStakeIntervalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{0}
}
func (m *QueryArchLiquidStakeIntervalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArchLiquidStakeIntervalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArchLiquidStakeIntervalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArchLiquidStakeIntervalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArchLiquidStakeIntervalRequest.Merge(m, src)
}
func (m *QueryArchLiquidStakeIntervalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArchLiquidStakeIntervalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArchLiquidStakeIntervalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArchLiquidStakeIntervalRequest proto.InternalMessageInfo

type QueryArchLiquidStakeIntervalResponse struct {
	ArchLiquidStakeInterval string `protobuf:"bytes,1,opt,name=arch_liquid_stake_interval,json=archLiquidStakeInterval,proto3" json:"arch_liquid_stake_interval,omitempty"`
}

func (m *QueryArchLiquidStakeIntervalResponse) Reset()         { *m = QueryArchLiquidStakeIntervalResponse{} }
func (m *QueryArchLiquidStakeIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArchLiquidStakeIntervalResponse) ProtoMessage()    {}
func (*QueryArchLiquidStakeIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{1}
}
func (m *QueryArchLiquidStakeIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArchLiquidStakeIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArchLiquidStakeIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArchLiquidStakeIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArchLiquidStakeIntervalResponse.Merge(m, src)
}
func (m *QueryArchLiquidStakeIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArchLiquidStakeIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArchLiquidStakeIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArchLiquidStakeIntervalResponse proto.InternalMessageInfo

func (m *QueryArchLiquidStakeIntervalResponse) GetArchLiquidStakeInterval() string {
	if m != nil {
		return m.ArchLiquidStakeInterval
	}
	return ""
}

type QueryRedemptionRateQueryIntervalRequest struct {
}

func (m *QueryRedemptionRateQueryIntervalRequest) Reset() {
	*m = QueryRedemptionRateQueryIntervalRequest{}
}
func (m *QueryRedemptionRateQueryIntervalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateQueryIntervalRequest) ProtoMessage()    {}
func (*QueryRedemptionRateQueryIntervalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{2}
}
func (m *QueryRedemptionRateQueryIntervalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateQueryIntervalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateQueryIntervalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateQueryIntervalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateQueryIntervalRequest.Merge(m, src)
}
func (m *QueryRedemptionRateQueryIntervalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateQueryIntervalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateQueryIntervalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateQueryIntervalRequest proto.InternalMessageInfo

type QueryRedemptionRateQueryIntervalResponse struct {
	RedemptionRateQueryInterval string `protobuf:"bytes,1,opt,name=redemption_rate_query_interval,json=redemptionRateQueryInterval,proto3" json:"redemption_rate_query_interval,omitempty"`
}

func (m *QueryRedemptionRateQueryIntervalResponse) Reset() {
	*m = QueryRedemptionRateQueryIntervalResponse{}
}
func (m *QueryRedemptionRateQueryIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateQueryIntervalResponse) ProtoMessage()    {}
func (*QueryRedemptionRateQueryIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{3}
}
func (m *QueryRedemptionRateQueryIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateQueryIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateQueryIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateQueryIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateQueryIntervalResponse.Merge(m, src)
}
func (m *QueryRedemptionRateQueryIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateQueryIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateQueryIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateQueryIntervalResponse proto.InternalMessageInfo

func (m *QueryRedemptionRateQueryIntervalResponse) GetRedemptionRateQueryInterval() string {
	if m != nil {
		return m.RedemptionRateQueryInterval
	}
	return ""
}

type QueryRedemptionIntervalRequest struct {
}

func (m *QueryRedemptionIntervalRequest) Reset()         { *m = QueryRedemptionIntervalRequest{} }
func (m *QueryRedemptionIntervalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionIntervalRequest) ProtoMessage()    {}
func (*QueryRedemptionIntervalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{4}
}
func (m *QueryRedemptionIntervalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionIntervalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionIntervalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionIntervalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionIntervalRequest.Merge(m, src)
}
func (m *QueryRedemptionIntervalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionIntervalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionIntervalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionIntervalRequest proto.InternalMessageInfo

type QueryRedemptionIntervalResponse struct {
	RedemptionInterval string `protobuf:"bytes,1,opt,name=redemption_interval,json=redemptionInterval,proto3" json:"redemption_interval,omitempty"`
}

func (m *QueryRedemptionIntervalResponse) Reset()         { *m = QueryRedemptionIntervalResponse{} }
func (m *QueryRedemptionIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionIntervalResponse) ProtoMessage()    {}
func (*QueryRedemptionIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{5}
}
func (m *QueryRedemptionIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionIntervalResponse.Merge(m, src)
}
func (m *QueryRedemptionIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionIntervalResponse proto.InternalMessageInfo

func (m *QueryRedemptionIntervalResponse) GetRedemptionInterval() string {
	if m != nil {
		return m.RedemptionInterval
	}
	return ""
}

type QueryRedemptionRateThresholdRequest struct {
}

func (m *QueryRedemptionRateThresholdRequest) Reset()         { *m = QueryRedemptionRateThresholdRequest{} }
func (m *QueryRedemptionRateThresholdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateThresholdRequest) ProtoMessage()    {}
func (*QueryRedemptionRateThresholdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{6}
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateThresholdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateThresholdRequest.Merge(m, src)
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateThresholdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateThresholdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateThresholdRequest proto.InternalMessageInfo

type QueryRedemptionRateThresholdResponse struct {
	RedemptionRateThreshold string `protobuf:"bytes,1,opt,name=redemption_rate_threshold,json=redemptionRateThreshold,proto3" json:"redemption_rate_threshold,omitempty"`
}

func (m *QueryRedemptionRateThresholdResponse) Reset()         { *m = QueryRedemptionRateThresholdResponse{} }
func (m *QueryRedemptionRateThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateThresholdResponse) ProtoMessage()    {}
func (*QueryRedemptionRateThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{7}
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateThresholdResponse.Merge(m, src)
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateThresholdResponse proto.InternalMessageInfo

func (m *QueryRedemptionRateThresholdResponse) GetRedemptionRateThreshold() string {
	if m != nil {
		return m.RedemptionRateThreshold
	}
	return ""
}

type QueryRewardsWithdrawalIntervalRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryRewardsWithdrawalIntervalRequest) Reset()         { *m = QueryRewardsWithdrawalIntervalRequest{} }
func (m *QueryRewardsWithdrawalIntervalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsWithdrawalIntervalRequest) ProtoMessage()    {}
func (*QueryRewardsWithdrawalIntervalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{8}
}
func (m *QueryRewardsWithdrawalIntervalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsWithdrawalIntervalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsWithdrawalIntervalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsWithdrawalIntervalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsWithdrawalIntervalRequest.Merge(m, src)
}
func (m *QueryRewardsWithdrawalIntervalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsWithdrawalIntervalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsWithdrawalIntervalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsWithdrawalIntervalRequest proto.InternalMessageInfo

func (m *QueryRewardsWithdrawalIntervalRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryRewardsWithdrawalIntervalResponse struct {
	RewardsWithdrawalInterval string `protobuf:"bytes,1,opt,name=rewards_withdrawal_interval,json=rewardsWithdrawalInterval,proto3" json:"rewards_withdrawal_interval,omitempty"`
}

func (m *QueryRewardsWithdrawalIntervalResponse) Reset() {
	*m = QueryRewardsWithdrawalIntervalResponse{}
}
func (m *QueryRewardsWithdrawalIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsWithdrawalIntervalResponse) ProtoMessage()    {}
func (*QueryRewardsWithdrawalIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{9}
}
func (m *QueryRewardsWithdrawalIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsWithdrawalIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsWithdrawalIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsWithdrawalIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsWithdrawalIntervalResponse.Merge(m, src)
}
func (m *QueryRewardsWithdrawalIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsWithdrawalIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsWithdrawalIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsWithdrawalIntervalResponse proto.InternalMessageInfo

func (m *QueryRewardsWithdrawalIntervalResponse) GetRewardsWithdrawalInterval() string {
	if m != nil {
		return m.RewardsWithdrawalInterval
	}
	return ""
}

type QueryLatestRedemptionRecordRequest struct {
}

func (m *QueryLatestRedemptionRecordRequest) Reset()         { *m = QueryLatestRedemptionRecordRequest{} }
func (m *QueryLatestRedemptionRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRedemptionRecordRequest) ProtoMessage()    {}
func (*QueryLatestRedemptionRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{10}
}
func (m *QueryLatestRedemptionRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRedemptionRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRedemptionRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRedemptionRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRedemptionRecordRequest.Merge(m, src)
}
func (m *QueryLatestRedemptionRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRedemptionRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRedemptionRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRedemptionRecordRequest proto.InternalMessageInfo

type QueryLatestRedemptionRecordResponse struct {
	LatestRedemptionRecord string `protobuf:"bytes,1,opt,name=latest_redemption_record,json=latestRedemptionRecord,proto3" json:"latest_redemption_record,omitempty"`
}

func (m *QueryLatestRedemptionRecordResponse) Reset()         { *m = QueryLatestRedemptionRecordResponse{} }
func (m *QueryLatestRedemptionRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRedemptionRecordResponse) ProtoMessage()    {}
func (*QueryLatestRedemptionRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{11}
}
func (m *QueryLatestRedemptionRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRedemptionRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRedemptionRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRedemptionRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRedemptionRecordResponse.Merge(m, src)
}
func (m *QueryLatestRedemptionRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRedemptionRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRedemptionRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRedemptionRecordResponse proto.InternalMessageInfo

func (m *QueryLatestRedemptionRecordResponse) GetLatestRedemptionRecord() string {
	if m != nil {
		return m.LatestRedemptionRecord
	}
	return ""
}

type QueryCumulativeLiquidityAmountRequest struct {
}

func (m *QueryCumulativeLiquidityAmountRequest) Reset()         { *m = QueryCumulativeLiquidityAmountRequest{} }
func (m *QueryCumulativeLiquidityAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCumulativeLiquidityAmountRequest) ProtoMessage()    {}
func (*QueryCumulativeLiquidityAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{12}
}
func (m *QueryCumulativeLiquidityAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCumulativeLiquidityAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCumulativeLiquidityAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCumulativeLiquidityAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCumulativeLiquidityAmountRequest.Merge(m, src)
}
func (m *QueryCumulativeLiquidityAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCumulativeLiquidityAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCumulativeLiquidityAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCumulativeLiquidityAmountRequest proto.InternalMessageInfo

type QueryCumulativeLiquidityAmountResponse struct {
	CumulativeLiquidityAmount uint64 `protobuf:"varint,1,opt,name=cumulative_liquidity_amount,json=cumulativeLiquidityAmount,proto3" json:"cumulative_liquidity_amount,omitempty"`
}

func (m *QueryCumulativeLiquidityAmountResponse) Reset() {
	*m = QueryCumulativeLiquidityAmountResponse{}
}
func (m *QueryCumulativeLiquidityAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCumulativeLiquidityAmountResponse) ProtoMessage()    {}
func (*QueryCumulativeLiquidityAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{13}
}
func (m *QueryCumulativeLiquidityAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCumulativeLiquidityAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCumulativeLiquidityAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCumulativeLiquidityAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCumulativeLiquidityAmountResponse.Merge(m, src)
}
func (m *QueryCumulativeLiquidityAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCumulativeLiquidityAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCumulativeLiquidityAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCumulativeLiquidityAmountResponse proto.InternalMessageInfo

func (m *QueryCumulativeLiquidityAmountResponse) GetCumulativeLiquidityAmount() uint64 {
	if m != nil {
		return m.CumulativeLiquidityAmount
	}
	return 0
}

// QueryLiquidTokensParams defines the parameters for the QueryLiquidTokens
// query.
type QueryLiquidTokensParams struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryLiquidTokensParams) Reset()         { *m = QueryLiquidTokensParams{} }
func (m *QueryLiquidTokensParams) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidTokensParams) ProtoMessage()    {}
func (*QueryLiquidTokensParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{14}
}
func (m *QueryLiquidTokensParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidTokensParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidTokensParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidTokensParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidTokensParams.Merge(m, src)
}
func (m *QueryLiquidTokensParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidTokensParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidTokensParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidTokensParams proto.InternalMessageInfo

func (m *QueryLiquidTokensParams) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryLiquidStakingDepositParams defines the parameters for the
// QueryLiquidStakingDeposit query.
type QueryLiquidStakingDepositParams struct {
	SenderAddress   string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryLiquidStakingDepositParams) Reset()         { *m = QueryLiquidStakingDepositParams{} }
func (m *QueryLiquidStakingDepositParams) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidStakingDepositParams) ProtoMessage()    {}
func (*QueryLiquidStakingDepositParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{15}
}
func (m *QueryLiquidStakingDepositParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidStakingDepositParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidStakingDepositParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidStakingDepositParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidStakingDepositParams.Merge(m, src)
}
func (m *QueryLiquidStakingDepositParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidStakingDepositParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidStakingDepositParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidStakingDepositParams proto.InternalMessageInfo

func (m *QueryLiquidStakingDepositParams) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *QueryLiquidStakingDepositParams) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryLiquidityTokenBalanceParams defines the parameters for the
// QueryLiquidityTokenBalance query.
type QueryLiquidityTokenBalanceParams struct {
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryLiquidityTokenBalanceParams) Reset()         { *m = QueryLiquidityTokenBalanceParams{} }
func (m *QueryLiquidityTokenBalanceParams) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityTokenBalanceParams) ProtoMessage()    {}
func (*QueryLiquidityTokenBalanceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{16}
}
func (m *QueryLiquidityTokenBalanceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityTokenBalanceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityTokenBalanceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityTokenBalanceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityTokenBalanceParams.Merge(m, src)
}
func (m *QueryLiquidityTokenBalanceParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityTokenBalanceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityTokenBalanceParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityTokenBalanceParams proto.InternalMessageInfo

func (m *QueryLiquidityTokenBalanceParams) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

// QueryRedemptionRateParams defines the parameters for the QueryRedemptionRate
// query.
type QueryRedemptionRateParams struct {
}

func (m *QueryRedemptionRateParams) Reset()         { *m = QueryRedemptionRateParams{} }
func (m *QueryRedemptionRateParams) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateParams) ProtoMessage()    {}
func (*QueryRedemptionRateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{17}
}
func (m *QueryRedemptionRateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateParams.Merge(m, src)
}
func (m *QueryRedemptionRateParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateParams proto.InternalMessageInfo

// QueryAirdropStatusParams defines the parameters for the QueryAirdropStatus
// query.
type QueryAirdropStatusParams struct {
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryAirdropStatusParams) Reset()         { *m = QueryAirdropStatusParams{} }
func (m *QueryAirdropStatusParams) String() string { return proto.CompactTextString(m) }
func (*QueryAirdropStatusParams) ProtoMessage()    {}
func (*QueryAirdropStatusParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{18}
}
func (m *QueryAirdropStatusParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirdropStatusParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirdropStatusParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirdropStatusParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirdropStatusParams.Merge(m, src)
}
func (m *QueryAirdropStatusParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirdropStatusParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirdropStatusParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirdropStatusParams proto.InternalMessageInfo

func (m *QueryAirdropStatusParams) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

// QueryLiquidStakingDepositResponse defines the response to the
// QueryLiquidStakingDeposit query.
type QueryLiquidStakingDepositResponse struct {
	DepositAmount        []*Coin `protobuf:"bytes,1,rep,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	LiquidityTokenAmount []*Coin `protobuf:"bytes,2,rep,name=liquidity_token_amount,json=liquidityTokenAmount,proto3" json:"liquidity_token_amount,omitempty"`
	NextRedemptionTime   int64   `protobuf:"varint,3,opt,name=next_redemption_time,json=nextRedemptionTime,proto3" json:"next_redemption_time,omitempty"`
}

func (m *QueryLiquidStakingDepositResponse) Reset()         { *m = QueryLiquidStakingDepositResponse{} }
func (m *QueryLiquidStakingDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidStakingDepositResponse) ProtoMessage()    {}
func (*QueryLiquidStakingDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{19}
}
func (m *QueryLiquidStakingDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidStakingDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidStakingDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidStakingDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidStakingDepositResponse.Merge(m, src)
}
func (m *QueryLiquidStakingDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidStakingDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidStakingDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidStakingDepositResponse proto.InternalMessageInfo

func (m *QueryLiquidStakingDepositResponse) GetDepositAmount() []*Coin {
	if m != nil {
		return m.DepositAmount
	}
	return nil
}

func (m *QueryLiquidStakingDepositResponse) GetLiquidityTokenAmount() []*Coin {
	if m != nil {
		return m.LiquidityTokenAmount
	}
	return nil
}

func (m *QueryLiquidStakingDepositResponse) GetNextRedemptionTime() int64 {
	if m != nil {
		return m.NextRedemptionTime
	}
	return 0
}

// QueryLiquidityTokenBalanceResponse defines the response to the
// QueryLiquidityTokenBalance query.
type QueryLiquidityTokenBalanceResponse struct {
	Balance []*Coin `protobuf:"bytes,1,rep,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryLiquidityTokenBalanceResponse) Reset()         { *m = QueryLiquidityTokenBalanceResponse{} }
func (m *QueryLiquidityTokenBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityTokenBalanceResponse) ProtoMessage()    {}
func (*QueryLiquidityTokenBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{20}
}
func (m *QueryLiquidityTokenBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityTokenBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityTokenBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityTokenBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityTokenBalanceResponse.Merge(m, src)
}
func (m *QueryLiquidityTokenBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityTokenBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityTokenBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityTokenBalanceResponse proto.InternalMessageInfo

func (m *QueryLiquidityTokenBalanceResponse) GetBalance() []*Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

// QueryRedemptionRateResponse defines the response to the QueryRedemptionRate
// query.
type QueryRedemptionRateResponse struct {
	RedemptionRate string `protobuf:"bytes,1,opt,name=redemption_rate,json=redemptionRate,proto3" json:"redemption_rate,omitempty"`
}

func (m *QueryRedemptionRateResponse) Reset()         { *m = QueryRedemptionRateResponse{} }
func (m *QueryRedemptionRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateResponse) ProtoMessage()    {}
func (*QueryRedemptionRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{21}
}
func (m *QueryRedemptionRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateResponse.Merge(m, src)
}
func (m *QueryRedemptionRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateResponse proto.InternalMessageInfo

func (m *QueryRedemptionRateResponse) GetRedemptionRate() string {
	if m != nil {
		return m.RedemptionRate
	}
	return ""
}

// QueryAirdropStatusResponse defines the response to the QueryAirdropStatus
// query.
type QueryAirdropStatusResponse struct {
	TotalAmount     []*Coin `protobuf:"bytes,1,rep,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	VestingSchedule string  `protobuf:"bytes,2,opt,name=vesting_schedule,json=vestingSchedule,proto3" json:"vesting_schedule,omitempty"`
	CurrentBalance  []*Coin `protobuf:"bytes,3,rep,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
}

func (m *QueryAirdropStatusResponse) Reset()         { *m = QueryAirdropStatusResponse{} }
func (m *QueryAirdropStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAirdropStatusResponse) ProtoMessage()    {}
func (*QueryAirdropStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{22}
}
func (m *QueryAirdropStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirdropStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirdropStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirdropStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirdropStatusResponse.Merge(m, src)
}
func (m *QueryAirdropStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirdropStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirdropStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirdropStatusResponse proto.InternalMessageInfo

func (m *QueryAirdropStatusResponse) GetTotalAmount() []*Coin {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *QueryAirdropStatusResponse) GetVestingSchedule() string {
	if m != nil {
		return m.VestingSchedule
	}
	return ""
}

func (m *QueryAirdropStatusResponse) GetCurrentBalance() []*Coin {
	if m != nil {
		return m.CurrentBalance
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryArchLiquidStakeIntervalRequest)(nil), "QueryArchLiquidStakeIntervalRequest")
	proto.RegisterType((*QueryArchLiquidStakeIntervalResponse)(nil), "QueryArchLiquidStakeIntervalResponse")
	proto.RegisterType((*QueryRedemptionRateQueryIntervalRequest)(nil), "QueryRedemptionRateQueryIntervalRequest")
	proto.RegisterType((*QueryRedemptionRateQueryIntervalResponse)(nil), "QueryRedemptionRateQueryIntervalResponse")
	proto.RegisterType((*QueryRedemptionIntervalRequest)(nil), "QueryRedemptionIntervalRequest")
	proto.RegisterType((*QueryRedemptionIntervalResponse)(nil), "QueryRedemptionIntervalResponse")
	proto.RegisterType((*QueryRedemptionRateThresholdRequest)(nil), "QueryRedemptionRateThresholdRequest")
	proto.RegisterType((*QueryRedemptionRateThresholdResponse)(nil), "QueryRedemptionRateThresholdResponse")
	proto.RegisterType((*QueryRewardsWithdrawalIntervalRequest)(nil), "QueryRewardsWithdrawalIntervalRequest")
	proto.RegisterType((*QueryRewardsWithdrawalIntervalResponse)(nil), "QueryRewardsWithdrawalIntervalResponse")
	proto.RegisterType((*QueryLatestRedemptionRecordRequest)(nil), "QueryLatestRedemptionRecordRequest")
	proto.RegisterType((*QueryLatestRedemptionRecordResponse)(nil), "QueryLatestRedemptionRecordResponse")
	proto.RegisterType((*QueryCumulativeLiquidityAmountRequest)(nil), "QueryCumulativeLiquidityAmountRequest")
	proto.RegisterType((*QueryCumulativeLiquidityAmountResponse)(nil), "QueryCumulativeLiquidityAmountResponse")
	proto.RegisterType((*QueryLiquidTokensParams)(nil), "QueryLiquidTokensParams")
	proto.RegisterType((*QueryLiquidStakingDepositParams)(nil), "QueryLiquidStakingDepositParams")
	proto.RegisterType((*QueryLiquidityTokenBalanceParams)(nil), "QueryLiquidityTokenBalanceParams")
	proto.RegisterType((*QueryRedemptionRateParams)(nil), "QueryRedemptionRateParams")
	proto.RegisterType((*QueryAirdropStatusParams)(nil), "QueryAirdropStatusParams")
	proto.RegisterType((*QueryLiquidStakingDepositResponse)(nil), "QueryLiquidStakingDepositResponse")
	proto.RegisterType((*QueryLiquidityTokenBalanceResponse)(nil), "QueryLiquidityTokenBalanceResponse")
	proto.RegisterType((*QueryRedemptionRateResponse)(nil), "QueryRedemptionRateResponse")
	proto.RegisterType((*QueryAirdropStatusResponse)(nil), "QueryAirdropStatusResponse")
}

func init() {
	proto.RegisterFile("archway/photosynthesis/query.proto", fileDescriptor_7d6e8948b7cb5c49)
}

var fileDescriptor_7d6e8948b7cb5c49 = []byte{
	// 1039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdf, 0x6e, 0xdb, 0xb6,
	0x17, 0x8e, 0x9b, 0x5f, 0x7f, 0x43, 0x4f, 0xd7, 0xa4, 0x63, 0x83, 0xd6, 0x96, 0x03, 0xc7, 0x55,
	0x93, 0xc6, 0xd9, 0x1f, 0x6a, 0xed, 0x76, 0xb1, 0xad, 0xc0, 0x80, 0x34, 0xdd, 0x80, 0x02, 0x01,
	0xb6, 0x39, 0x01, 0x06, 0x0c, 0x03, 0x04, 0x5a, 0xe2, 0x2c, 0x22, 0xb2, 0xa8, 0x90, 0x54, 0x5c,
	0xbf, 0xc5, 0x5e, 0x61, 0x37, 0x7b, 0x8e, 0x5d, 0xee, 0xb2, 0x97, 0xbb, 0x1c, 0x92, 0x17, 0x19,
	0x2c, 0x91, 0xb2, 0x2d, 0x4b, 0x96, 0x73, 0x27, 0x1d, 0x7e, 0x3c, 0x7f, 0xbe, 0xc3, 0x43, 0x7d,
	0x02, 0x9b, 0x08, 0x2f, 0x18, 0x93, 0x89, 0x13, 0x07, 0x5c, 0x71, 0x39, 0x89, 0x54, 0x40, 0x25,
	0x93, 0xce, 0x65, 0x42, 0xc5, 0x04, 0xc7, 0x82, 0x2b, 0x6e, 0xed, 0x0d, 0x39, 0x1f, 0x86, 0xd4,
	0x49, 0xdf, 0x06, 0xc9, 0x6f, 0x8e, 0x62, 0x23, 0x2a, 0x15, 0x19, 0xc5, 0x1a, 0xd0, 0x29, 0x02,
	0xfc, 0x44, 0x10, 0xc5, 0x78, 0xa4, 0xd7, 0x77, 0x86, 0x7c, 0xc8, 0xd3, 0x47, 0x67, 0xfa, 0xa4,
	0xad, 0xbb, 0x7a, 0x17, 0x89, 0x99, 0x43, 0xa2, 0x88, 0xab, 0x74, 0x8b, 0x34, 0x3e, 0x3d, 0x2e,
	0x47, 0x5c, 0x3a, 0x03, 0x22, 0xa9, 0x73, 0xf5, 0x62, 0x40, 0x15, 0x79, 0xe1, 0x78, 0x9c, 0x19,
	0x9f, 0x1f, 0xcf, 0xaf, 0xa7, 0xd9, 0xe6, 0xa8, 0x98, 0x0c, 0x59, 0x34, 0x1f, 0xff, 0x93, 0x8a,
	0x22, 0x17, 0x5f, 0x33, 0xb0, 0x7d, 0x00, 0xcf, 0x7e, 0x9a, 0xba, 0x3b, 0x16, 0x5e, 0x70, 0xca,
	0x2e, 0x13, 0xe6, 0x9f, 0x29, 0x72, 0x41, 0xdf, 0x46, 0x8a, 0x8a, 0x2b, 0x12, 0xf6, 0xe9, 0x65,
	0x42, 0xa5, 0xb2, 0x3d, 0xd8, 0x5f, 0x0d, 0x93, 0x31, 0x8f, 0x24, 0x45, 0xaf, 0xc0, 0x9a, 0x46,
	0x77, 0xc3, 0x14, 0xe3, 0xca, 0x29, 0xc8, 0x65, 0x1a, 0xd5, 0x6c, 0x74, 0x1b, 0xbd, 0x7b, 0xfd,
	0x27, 0xa4, 0xdc, 0x89, 0x7d, 0x04, 0x87, 0x69, 0x90, 0x3e, 0xf5, 0xe9, 0x28, 0x9e, 0x56, 0xd4,
	0x27, 0x8a, 0xa6, 0xa6, 0x62, 0x3e, 0x1c, 0x7a, 0xf5, 0x50, 0x9d, 0xd3, 0x09, 0x74, 0x44, 0x0e,
	0x73, 0x05, 0x51, 0xd4, 0x4d, 0x19, 0x2c, 0xe6, 0xd5, 0x16, 0xd5, 0xce, 0xec, 0x2e, 0x74, 0x0a,
	0x01, 0x8b, 0x29, 0xf5, 0x61, 0xaf, 0x12, 0xa1, 0x33, 0x71, 0xe0, 0xd1, 0x5c, 0x26, 0x85, 0xf0,
	0x48, 0x2c, 0x6d, 0xcc, 0xbb, 0xb3, 0x58, 0xe6, 0x79, 0x20, 0xa8, 0x0c, 0x78, 0xe8, 0x9b, 0xd0,
	0x03, 0xdd, 0x9d, 0x4a, 0x98, 0x8e, 0xff, 0x0d, 0xb4, 0x8a, 0x4c, 0x28, 0x03, 0x32, 0xcd, 0x11,
	0xe5, 0x3e, 0xec, 0x3e, 0x1c, 0xe8, 0x18, 0x63, 0x22, 0x7c, 0xf9, 0x33, 0x53, 0x81, 0x2f, 0xc8,
	0x98, 0x84, 0x05, 0x1e, 0xd0, 0x11, 0x3c, 0xf4, 0x78, 0xa4, 0x04, 0xf1, 0x94, 0x4b, 0x7c, 0x5f,
	0x50, 0x29, 0xb5, 0xef, 0x6d, 0x63, 0x3f, 0xce, 0xcc, 0x76, 0x00, 0xcf, 0xeb, 0x7c, 0xea, 0xcc,
	0xbf, 0x85, 0xb6, 0xc8, 0x40, 0xee, 0x38, 0x47, 0x15, 0x19, 0x6c, 0x89, 0x2a, 0x3f, 0xf6, 0x3e,
	0xd8, 0x69, 0xa4, 0x53, 0xa2, 0xa8, 0x54, 0x73, 0x3c, 0x51, 0x8f, 0x8b, 0x9c, 0x47, 0x57, 0xd3,
	0x5d, 0x85, 0xd2, 0xc9, 0x7c, 0x05, 0xcd, 0x30, 0x45, 0xb8, 0xf3, 0x6c, 0xa6, 0x18, 0x9d, 0xc9,
	0xe3, 0xb0, 0xd4, 0x83, 0x7d, 0xa8, 0x49, 0x3c, 0x49, 0x46, 0x49, 0x48, 0x14, 0xbb, 0xa2, 0xd9,
	0x1c, 0x30, 0x35, 0x39, 0x1e, 0xf1, 0x24, 0x52, 0x26, 0x13, 0xc3, 0xcc, 0x0a, 0xe0, 0x8c, 0x19,
	0x2f, 0x07, 0xe9, 0xb9, 0x63, 0x6a, 0xe2, 0x92, 0x14, 0x96, 0xe6, 0xf3, 0xbf, 0x7e, 0xcb, 0xab,
	0xf2, 0x63, 0xbf, 0x81, 0x27, 0x59, 0xcd, 0xa9, 0xfd, 0x9c, 0x5f, 0xd0, 0x48, 0xfe, 0x48, 0x04,
	0x19, 0xc9, 0xdb, 0x74, 0x52, 0xea, 0xc3, 0x3f, 0x1b, 0x6b, 0x16, 0x0d, 0xdf, 0xd0, 0x98, 0x4b,
	0xa6, 0xb4, 0xb7, 0x03, 0xd8, 0x92, 0x34, 0xf2, 0xa9, 0x28, 0xf8, 0x7a, 0x90, 0x59, 0xb5, 0xa7,
	0xd2, 0xa0, 0x77, 0xca, 0x83, 0xbe, 0x85, 0xee, 0x5c, 0x50, 0xa6, 0x26, 0x69, 0xf6, 0xaf, 0x49,
	0x48, 0x22, 0x8f, 0xde, 0x2a, 0xaa, 0xdd, 0x86, 0x56, 0xc9, 0x04, 0x65, 0x3e, 0xec, 0x63, 0x68,
	0x66, 0x97, 0x1f, 0x13, 0xbe, 0xe0, 0xf1, 0x99, 0x22, 0x2a, 0x91, 0xb7, 0xf3, 0xff, 0x57, 0x03,
	0x9e, 0x56, 0x12, 0x94, 0xf7, 0xf2, 0x53, 0xd8, 0xf2, 0x33, 0xd3, 0xac, 0x7d, 0x9b, 0xbd, 0xfb,
	0x2f, 0xef, 0xe2, 0x13, 0xce, 0xa2, 0xfe, 0x03, 0xbd, 0x98, 0x75, 0x0e, 0xbd, 0x82, 0xc7, 0xb3,
	0x76, 0xab, 0x69, 0xe9, 0x66, 0xd7, 0x9d, 0xf9, 0x5d, 0x3b, 0xe1, 0x02, 0x3d, 0x7a, 0xf3, 0xe7,
	0xb0, 0x13, 0xd1, 0x77, 0x0b, 0x27, 0x78, 0xfa, 0x9d, 0x6b, 0x6e, 0x76, 0x1b, 0xbd, 0xcd, 0x3e,
	0x9a, 0xae, 0xcd, 0xb8, 0x38, 0x67, 0x23, 0x6a, 0x7f, 0x67, 0x46, 0xa8, 0x8c, 0xed, 0xbc, 0x84,
	0x3d, 0xf8, 0x60, 0x90, 0x99, 0x16, 0x73, 0x37, 0x56, 0xfb, 0x7b, 0x68, 0x97, 0x30, 0x9d, 0xef,
	0x3f, 0x84, 0xed, 0xc2, 0x15, 0xa5, 0x09, 0xdd, 0x5a, 0xbc, 0x98, 0xec, 0x3f, 0x1a, 0x60, 0x2d,
	0x77, 0x25, 0xf7, 0xd3, 0x83, 0x0f, 0x15, 0x57, 0x24, 0x2c, 0x25, 0xf2, 0x7e, 0xba, 0xa4, 0x99,
	0x38, 0x82, 0x87, 0x57, 0x54, 0x2a, 0x16, 0x0d, 0x5d, 0xe9, 0x05, 0xd4, 0x4f, 0x42, 0x6a, 0x0e,
	0x9c, 0xb6, 0x9f, 0x69, 0x33, 0xc2, 0xb0, 0xed, 0x25, 0x42, 0xd0, 0x48, 0xb9, 0xa6, 0xc8, 0xcd,
	0x79, 0xbf, 0x5b, 0x7a, 0x55, 0x93, 0xf2, 0xf2, 0xcf, 0x7b, 0x70, 0x37, 0xcd, 0x11, 0x7d, 0x09,
	0x1f, 0x2d, 0x4d, 0x19, 0x6a, 0xe2, 0x8a, 0xc9, 0xb3, 0x32, 0x7f, 0x88, 0xe8, 0x53, 0x59, 0x76,
	0x68, 0x50, 0x17, 0xd7, 0x4c, 0x9c, 0x65, 0xe3, 0xfa, 0x23, 0xe7, 0x6b, 0x16, 0x4b, 0xbb, 0x8a,
	0x9e, 0xe2, 0xba, 0x01, 0xb3, 0x9e, 0xe1, 0x35, 0x4e, 0xc5, 0x0f, 0xf0, 0xa8, 0xa4, 0xe9, 0xc8,
	0xc2, 0x95, 0x43, 0x67, 0xed, 0xe2, 0x55, 0xc7, 0xe4, 0x14, 0xd0, 0x72, 0xf3, 0x51, 0x0b, 0x57,
	0xcd, 0xa9, 0xd5, 0xc6, 0x2b, 0x0e, 0xcb, 0x05, 0xec, 0xae, 0x52, 0x37, 0x68, 0x1f, 0xaf, 0xa1,
	0x91, 0xac, 0x03, 0xbc, 0x96, 0x44, 0x1a, 0xeb, 0x5b, 0x6b, 0x85, 0x74, 0x41, 0x3d, 0xbc, 0xa6,
	0x10, 0xb2, 0x8e, 0xf0, 0xda, 0x3a, 0xe8, 0x57, 0x7d, 0xd3, 0x2f, 0x0b, 0x14, 0xb4, 0x87, 0x57,
	0x8b, 0x1b, 0xab, 0x8b, 0xeb, 0xb4, 0x8d, 0xe1, 0xb0, 0x42, 0x83, 0x18, 0x0e, 0x57, 0x2b, 0x19,
	0xc3, 0x61, 0x9d, 0x90, 0xb9, 0xcc, 0xd5, 0x58, 0xc5, 0x07, 0x1f, 0x3d, 0xc7, 0x6b, 0xa9, 0x15,
	0xeb, 0x10, 0xaf, 0xa9, 0x40, 0x02, 0x7d, 0x6f, 0x95, 0x6b, 0x03, 0x64, 0xc6, 0x60, 0x95, 0xbe,
	0xb0, 0xf6, 0xf1, 0x3a, 0xf2, 0xc2, 0x14, 0x57, 0xf9, 0xed, 0x37, 0xc5, 0xd5, 0xa9, 0x08, 0x53,
	0x5c, 0xad, 0x88, 0x78, 0x7d, 0xf6, 0xf7, 0x75, 0xa7, 0xf1, 0xfe, 0xba, 0xd3, 0xf8, 0xf7, 0xba,
	0xd3, 0xf8, 0xfd, 0xa6, 0xb3, 0xf1, 0xfe, 0xa6, 0xb3, 0xf1, 0xcf, 0x4d, 0x67, 0xe3, 0x97, 0xaf,
	0x87, 0x4c, 0x05, 0xc9, 0x00, 0x7b, 0x7c, 0xe4, 0xe8, 0xff, 0x8a, 0xcf, 0x22, 0xaa, 0xc6, 0x5c,
	0x5c, 0x98, 0x77, 0xe7, 0x5d, 0xf1, 0x4f, 0x43, 0x4d, 0x62, 0x2a, 0x07, 0xff, 0x4f, 0xff, 0x30,
	0xbe, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x66, 0x57, 0x3d, 0xea, 0x75, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryLiquidTokens(ctx context.Context, in *QueryLiquidTokensParams, opts ...grpc.CallOption) (*Coin, error)
	QueryLiquidStakingDeposit(ctx context.Context, in *QueryLiquidStakingDepositParams, opts ...grpc.CallOption) (*QueryLiquidStakingDepositResponse, error)
	QueryLiquidityTokenBalance(ctx context.Context, in *QueryLiquidityTokenBalanceParams, opts ...grpc.CallOption) (*QueryLiquidityTokenBalanceResponse, error)
	QueryRedemptionRate(ctx context.Context, in *QueryRedemptionRateParams, opts ...grpc.CallOption) (*QueryRedemptionRateResponse, error)
	QueryAirdropStatus(ctx context.Context, in *QueryAirdropStatusParams, opts ...grpc.CallOption) (*QueryAirdropStatusResponse, error)
	QueryArchLiquidStakeInterval(ctx context.Context, in *QueryArchLiquidStakeIntervalRequest, opts ...grpc.CallOption) (*QueryArchLiquidStakeIntervalResponse, error)
	QueryRedemptionRateQueryInterval(ctx context.Context, in *QueryRedemptionRateQueryIntervalRequest, opts ...grpc.CallOption) (*QueryRedemptionRateQueryIntervalResponse, error)
	QueryRedemptionInterval(ctx context.Context, in *QueryRedemptionIntervalRequest, opts ...grpc.CallOption) (*QueryRedemptionIntervalResponse, error)
	QueryRedemptionRateThreshold(ctx context.Context, in *QueryRedemptionRateThresholdRequest, opts ...grpc.CallOption) (*QueryRedemptionRateThresholdResponse, error)
	QueryRewardsWithdrawalInterval(ctx context.Context, in *QueryRewardsWithdrawalIntervalRequest, opts ...grpc.CallOption) (*QueryRewardsWithdrawalIntervalResponse, error)
	QueryLatestRedemptionRecord(ctx context.Context, in *QueryLatestRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryLatestRedemptionRecordResponse, error)
	QueryCumulativeLiquidityAmount(ctx context.Context, in *QueryCumulativeLiquidityAmountRequest, opts ...grpc.CallOption) (*QueryCumulativeLiquidityAmountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryLiquidTokens(ctx context.Context, in *QueryLiquidTokensParams, opts ...grpc.CallOption) (*Coin, error) {
	out := new(Coin)
	err := c.cc.Invoke(ctx, "/Query/QueryLiquidTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLiquidStakingDeposit(ctx context.Context, in *QueryLiquidStakingDepositParams, opts ...grpc.CallOption) (*QueryLiquidStakingDepositResponse, error) {
	out := new(QueryLiquidStakingDepositResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryLiquidStakingDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLiquidityTokenBalance(ctx context.Context, in *QueryLiquidityTokenBalanceParams, opts ...grpc.CallOption) (*QueryLiquidityTokenBalanceResponse, error) {
	out := new(QueryLiquidityTokenBalanceResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryLiquidityTokenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRedemptionRate(ctx context.Context, in *QueryRedemptionRateParams, opts ...grpc.CallOption) (*QueryRedemptionRateResponse, error) {
	out := new(QueryRedemptionRateResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryRedemptionRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAirdropStatus(ctx context.Context, in *QueryAirdropStatusParams, opts ...grpc.CallOption) (*QueryAirdropStatusResponse, error) {
	out := new(QueryAirdropStatusResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryAirdropStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryArchLiquidStakeInterval(ctx context.Context, in *QueryArchLiquidStakeIntervalRequest, opts ...grpc.CallOption) (*QueryArchLiquidStakeIntervalResponse, error) {
	out := new(QueryArchLiquidStakeIntervalResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryArchLiquidStakeInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRedemptionRateQueryInterval(ctx context.Context, in *QueryRedemptionRateQueryIntervalRequest, opts ...grpc.CallOption) (*QueryRedemptionRateQueryIntervalResponse, error) {
	out := new(QueryRedemptionRateQueryIntervalResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryRedemptionRateQueryInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRedemptionInterval(ctx context.Context, in *QueryRedemptionIntervalRequest, opts ...grpc.CallOption) (*QueryRedemptionIntervalResponse, error) {
	out := new(QueryRedemptionIntervalResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryRedemptionInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRedemptionRateThreshold(ctx context.Context, in *QueryRedemptionRateThresholdRequest, opts ...grpc.CallOption) (*QueryRedemptionRateThresholdResponse, error) {
	out := new(QueryRedemptionRateThresholdResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryRedemptionRateThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRewardsWithdrawalInterval(ctx context.Context, in *QueryRewardsWithdrawalIntervalRequest, opts ...grpc.CallOption) (*QueryRewardsWithdrawalIntervalResponse, error) {
	out := new(QueryRewardsWithdrawalIntervalResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryRewardsWithdrawalInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLatestRedemptionRecord(ctx context.Context, in *QueryLatestRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryLatestRedemptionRecordResponse, error) {
	out := new(QueryLatestRedemptionRecordResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryLatestRedemptionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCumulativeLiquidityAmount(ctx context.Context, in *QueryCumulativeLiquidityAmountRequest, opts ...grpc.CallOption) (*QueryCumulativeLiquidityAmountResponse, error) {
	out := new(QueryCumulativeLiquidityAmountResponse)
	err := c.cc.Invoke(ctx, "/Query/QueryCumulativeLiquidityAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryLiquidTokens(context.Context, *QueryLiquidTokensParams) (*Coin, error)
	QueryLiquidStakingDeposit(context.Context, *QueryLiquidStakingDepositParams) (*QueryLiquidStakingDepositResponse, error)
	QueryLiquidityTokenBalance(context.Context, *QueryLiquidityTokenBalanceParams) (*QueryLiquidityTokenBalanceResponse, error)
	QueryRedemptionRate(context.Context, *QueryRedemptionRateParams) (*QueryRedemptionRateResponse, error)
	QueryAirdropStatus(context.Context, *QueryAirdropStatusParams) (*QueryAirdropStatusResponse, error)
	QueryArchLiquidStakeInterval(context.Context, *QueryArchLiquidStakeIntervalRequest) (*QueryArchLiquidStakeIntervalResponse, error)
	QueryRedemptionRateQueryInterval(context.Context, *QueryRedemptionRateQueryIntervalRequest) (*QueryRedemptionRateQueryIntervalResponse, error)
	QueryRedemptionInterval(context.Context, *QueryRedemptionIntervalRequest) (*QueryRedemptionIntervalResponse, error)
	QueryRedemptionRateThreshold(context.Context, *QueryRedemptionRateThresholdRequest) (*QueryRedemptionRateThresholdResponse, error)
	QueryRewardsWithdrawalInterval(context.Context, *QueryRewardsWithdrawalIntervalRequest) (*QueryRewardsWithdrawalIntervalResponse, error)
	QueryLatestRedemptionRecord(context.Context, *QueryLatestRedemptionRecordRequest) (*QueryLatestRedemptionRecordResponse, error)
	QueryCumulativeLiquidityAmount(context.Context, *QueryCumulativeLiquidityAmountRequest) (*QueryCumulativeLiquidityAmountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryLiquidTokens(ctx context.Context, req *QueryLiquidTokensParams) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLiquidTokens not implemented")
}
func (*UnimplementedQueryServer) QueryLiquidStakingDeposit(ctx context.Context, req *QueryLiquidStakingDepositParams) (*QueryLiquidStakingDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLiquidStakingDeposit not implemented")
}
func (*UnimplementedQueryServer) QueryLiquidityTokenBalance(ctx context.Context, req *QueryLiquidityTokenBalanceParams) (*QueryLiquidityTokenBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLiquidityTokenBalance not implemented")
}
func (*UnimplementedQueryServer) QueryRedemptionRate(ctx context.Context, req *QueryRedemptionRateParams) (*QueryRedemptionRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRedemptionRate not implemented")
}
func (*UnimplementedQueryServer) QueryAirdropStatus(ctx context.Context, req *QueryAirdropStatusParams) (*QueryAirdropStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAirdropStatus not implemented")
}
func (*UnimplementedQueryServer) QueryArchLiquidStakeInterval(ctx context.Context, req *QueryArchLiquidStakeIntervalRequest) (*QueryArchLiquidStakeIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArchLiquidStakeInterval not implemented")
}
func (*UnimplementedQueryServer) QueryRedemptionRateQueryInterval(ctx context.Context, req *QueryRedemptionRateQueryIntervalRequest) (*QueryRedemptionRateQueryIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRedemptionRateQueryInterval not implemented")
}
func (*UnimplementedQueryServer) QueryRedemptionInterval(ctx context.Context, req *QueryRedemptionIntervalRequest) (*QueryRedemptionIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRedemptionInterval not implemented")
}
func (*UnimplementedQueryServer) QueryRedemptionRateThreshold(ctx context.Context, req *QueryRedemptionRateThresholdRequest) (*QueryRedemptionRateThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRedemptionRateThreshold not implemented")
}
func (*UnimplementedQueryServer) QueryRewardsWithdrawalInterval(ctx context.Context, req *QueryRewardsWithdrawalIntervalRequest) (*QueryRewardsWithdrawalIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRewardsWithdrawalInterval not implemented")
}
func (*UnimplementedQueryServer) QueryLatestRedemptionRecord(ctx context.Context, req *QueryLatestRedemptionRecordRequest) (*QueryLatestRedemptionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLatestRedemptionRecord not implemented")
}
func (*UnimplementedQueryServer) QueryCumulativeLiquidityAmount(ctx context.Context, req *QueryCumulativeLiquidityAmountRequest) (*QueryCumulativeLiquidityAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCumulativeLiquidityAmount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryLiquidTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidTokensParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLiquidTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryLiquidTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLiquidTokens(ctx, req.(*QueryLiquidTokensParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLiquidStakingDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidStakingDepositParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLiquidStakingDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryLiquidStakingDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLiquidStakingDeposit(ctx, req.(*QueryLiquidStakingDepositParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLiquidityTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityTokenBalanceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLiquidityTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryLiquidityTokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLiquidityTokenBalance(ctx, req.(*QueryLiquidityTokenBalanceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRedemptionRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRedemptionRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryRedemptionRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRedemptionRate(ctx, req.(*QueryRedemptionRateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAirdropStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAirdropStatusParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAirdropStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryAirdropStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAirdropStatus(ctx, req.(*QueryAirdropStatusParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryArchLiquidStakeInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArchLiquidStakeIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryArchLiquidStakeInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryArchLiquidStakeInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryArchLiquidStakeInterval(ctx, req.(*QueryArchLiquidStakeIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRedemptionRateQueryInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRateQueryIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRedemptionRateQueryInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryRedemptionRateQueryInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRedemptionRateQueryInterval(ctx, req.(*QueryRedemptionRateQueryIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRedemptionInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRedemptionInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryRedemptionInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRedemptionInterval(ctx, req.(*QueryRedemptionIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRedemptionRateThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRateThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRedemptionRateThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryRedemptionRateThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRedemptionRateThreshold(ctx, req.(*QueryRedemptionRateThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRewardsWithdrawalInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsWithdrawalIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRewardsWithdrawalInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryRewardsWithdrawalInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRewardsWithdrawalInterval(ctx, req.(*QueryRewardsWithdrawalIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLatestRedemptionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestRedemptionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLatestRedemptionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryLatestRedemptionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLatestRedemptionRecord(ctx, req.(*QueryLatestRedemptionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCumulativeLiquidityAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCumulativeLiquidityAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCumulativeLiquidityAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Query/QueryCumulativeLiquidityAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCumulativeLiquidityAmount(ctx, req.(*QueryCumulativeLiquidityAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLiquidTokens",
			Handler:    _Query_QueryLiquidTokens_Handler,
		},
		{
			MethodName: "QueryLiquidStakingDeposit",
			Handler:    _Query_QueryLiquidStakingDeposit_Handler,
		},
		{
			MethodName: "QueryLiquidityTokenBalance",
			Handler:    _Query_QueryLiquidityTokenBalance_Handler,
		},
		{
			MethodName: "QueryRedemptionRate",
			Handler:    _Query_QueryRedemptionRate_Handler,
		},
		{
			MethodName: "QueryAirdropStatus",
			Handler:    _Query_QueryAirdropStatus_Handler,
		},
		{
			MethodName: "QueryArchLiquidStakeInterval",
			Handler:    _Query_QueryArchLiquidStakeInterval_Handler,
		},
		{
			MethodName: "QueryRedemptionRateQueryInterval",
			Handler:    _Query_QueryRedemptionRateQueryInterval_Handler,
		},
		{
			MethodName: "QueryRedemptionInterval",
			Handler:    _Query_QueryRedemptionInterval_Handler,
		},
		{
			MethodName: "QueryRedemptionRateThreshold",
			Handler:    _Query_QueryRedemptionRateThreshold_Handler,
		},
		{
			MethodName: "QueryRewardsWithdrawalInterval",
			Handler:    _Query_QueryRewardsWithdrawalInterval_Handler,
		},
		{
			MethodName: "QueryLatestRedemptionRecord",
			Handler:    _Query_QueryLatestRedemptionRecord_Handler,
		},
		{
			MethodName: "QueryCumulativeLiquidityAmount",
			Handler:    _Query_QueryCumulativeLiquidityAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archway/photosynthesis/query.proto",
}

func (m *QueryArchLiquidStakeIntervalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArchLiquidStakeIntervalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArchLiquidStakeIntervalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryArchLiquidStakeIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArchLiquidStakeIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArchLiquidStakeIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ArchLiquidStakeInterval) > 0 {
		i -= len(m.ArchLiquidStakeInterval)
		copy(dAtA[i:], m.ArchLiquidStakeInterval)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ArchLiquidStakeInterval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateQueryIntervalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateQueryIntervalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateQueryIntervalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateQueryIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateQueryIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateQueryIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionRateQueryInterval) > 0 {
		i -= len(m.RedemptionRateQueryInterval)
		copy(dAtA[i:], m.RedemptionRateQueryInterval)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedemptionRateQueryInterval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionIntervalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionIntervalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionIntervalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionInterval) > 0 {
		i -= len(m.RedemptionInterval)
		copy(dAtA[i:], m.RedemptionInterval)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedemptionInterval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateThresholdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateThresholdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateThresholdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionRateThreshold) > 0 {
		i -= len(m.RedemptionRateThreshold)
		copy(dAtA[i:], m.RedemptionRateThreshold)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedemptionRateThreshold)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsWithdrawalIntervalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsWithdrawalIntervalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsWithdrawalIntervalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsWithdrawalIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsWithdrawalIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsWithdrawalIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardsWithdrawalInterval) > 0 {
		i -= len(m.RewardsWithdrawalInterval)
		copy(dAtA[i:], m.RewardsWithdrawalInterval)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardsWithdrawalInterval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRedemptionRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRedemptionRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRedemptionRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestRedemptionRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRedemptionRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRedemptionRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestRedemptionRecord) > 0 {
		i -= len(m.LatestRedemptionRecord)
		copy(dAtA[i:], m.LatestRedemptionRecord)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LatestRedemptionRecord)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCumulativeLiquidityAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCumulativeLiquidityAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCumulativeLiquidityAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCumulativeLiquidityAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCumulativeLiquidityAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCumulativeLiquidityAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CumulativeLiquidityAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CumulativeLiquidityAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidTokensParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidTokensParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidTokensParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidStakingDepositParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidStakingDepositParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidStakingDepositParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityTokenBalanceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityTokenBalanceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityTokenBalanceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAirdropStatusParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirdropStatusParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirdropStatusParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidStakingDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidStakingDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidStakingDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextRedemptionTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextRedemptionTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LiquidityTokenAmount) > 0 {
		for iNdEx := len(m.LiquidityTokenAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityTokenAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DepositAmount) > 0 {
		for iNdEx := len(m.DepositAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityTokenBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityTokenBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityTokenBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionRate) > 0 {
		i -= len(m.RedemptionRate)
		copy(dAtA[i:], m.RedemptionRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedemptionRate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAirdropStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirdropStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirdropStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentBalance) > 0 {
		for iNdEx := len(m.CurrentBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VestingSchedule) > 0 {
		i -= len(m.VestingSchedule)
		copy(dAtA[i:], m.VestingSchedule)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VestingSchedule)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TotalAmount) > 0 {
		for iNdEx := len(m.TotalAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryArchLiquidStakeIntervalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryArchLiquidStakeIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArchLiquidStakeInterval)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRateQueryIntervalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRedemptionRateQueryIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedemptionRateQueryInterval)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionIntervalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRedemptionIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedemptionInterval)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRateThresholdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRedemptionRateThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedemptionRateThreshold)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsWithdrawalIntervalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsWithdrawalIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardsWithdrawalInterval)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestRedemptionRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestRedemptionRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LatestRedemptionRecord)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCumulativeLiquidityAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCumulativeLiquidityAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CumulativeLiquidityAmount != 0 {
		n += 1 + sovQuery(uint64(m.CumulativeLiquidityAmount))
	}
	return n
}

func (m *QueryLiquidTokensParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidStakingDepositParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityTokenBalanceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAirdropStatusParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidStakingDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DepositAmount) > 0 {
		for _, e := range m.DepositAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.LiquidityTokenAmount) > 0 {
		for _, e := range m.LiquidityTokenAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.NextRedemptionTime != 0 {
		n += 1 + sovQuery(uint64(m.NextRedemptionTime))
	}
	return n
}

func (m *QueryLiquidityTokenBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRedemptionRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedemptionRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAirdropStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalAmount) > 0 {
		for _, e := range m.TotalAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.VestingSchedule)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.CurrentBalance) > 0 {
		for _, e := range m.CurrentBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryArchLiquidStakeIntervalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArchLiquidStakeIntervalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArchLiquidStakeIntervalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArchLiquidStakeIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArchLiquidStakeIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArchLiquidStakeIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchLiquidStakeInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchLiquidStakeInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateQueryIntervalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateQueryIntervalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateQueryIntervalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateQueryIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateQueryIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateQueryIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateQueryInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionRateQueryInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionIntervalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionIntervalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionIntervalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateThresholdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionRateThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsWithdrawalIntervalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsWithdrawalIntervalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsWithdrawalIntervalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsWithdrawalIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsWithdrawalIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsWithdrawalIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsWithdrawalInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsWithdrawalInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRedemptionRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRedemptionRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRedemptionRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRedemptionRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRedemptionRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRedemptionRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRedemptionRecord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestRedemptionRecord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCumulativeLiquidityAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCumulativeLiquidityAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCumulativeLiquidityAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCumulativeLiquidityAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCumulativeLiquidityAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCumulativeLiquidityAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeLiquidityAmount", wireType)
			}
			m.CumulativeLiquidityAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CumulativeLiquidityAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidTokensParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidTokensParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidTokensParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidStakingDepositParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidStakingDepositParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidStakingDepositParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityTokenBalanceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityTokenBalanceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityTokenBalanceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAirdropStatusParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirdropStatusParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirdropStatusParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidStakingDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidStakingDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidStakingDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAmount = append(m.DepositAmount, &Coin{})
			if err := m.DepositAmount[len(m.DepositAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityTokenAmount = append(m.LiquidityTokenAmount, &Coin{})
			if err := m.LiquidityTokenAmount[len(m.LiquidityTokenAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRedemptionTime", wireType)
			}
			m.NextRedemptionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRedemptionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityTokenBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityTokenBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityTokenBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, &Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAirdropStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirdropStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirdropStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = append(m.TotalAmount, &Coin{})
			if err := m.TotalAmount[len(m.TotalAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBalance = append(m.CurrentBalance, &Coin{})
			if err := m.CurrentBalance[len(m.CurrentBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
